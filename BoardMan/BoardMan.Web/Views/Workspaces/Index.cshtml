@using BoardMan.Web.Auth
@using BoardMan.Web.Data
@using BoardMan.Web.Infrastructure.Extensions
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model AllWorkspaces

<h3>@Model.Primary.Title</h3>
<p>@Model.Primary.Description</p>
<h3>Boards</h3>
@if (Model.Primary.Boards.Count > 0)
{
    foreach(var pBoard in Model.Primary.Boards)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title"> <a asp-controller="Boards" asp-action="Get" asp-route-boardId="@pBoard.Id">@pBoard.Title</a></h5>
                <p class="card-text">@pBoard.Description</p>  
                @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = @pBoard.Id, Type = EntityType.Board } ,Policies.BoardSuperAdminPolicy)).Succeeded)
                {
                   <a asp-controller="Boards" asp-action="Delete" asp-route-boardId="@pBoard.Id" asp-route-returnUrl="@Model.ReturnUrl" class="btn btn-primary">Remove</a>
                }                
            </div>
        </div>
        <br/>
    }
}
else
{
    <p>No Boards to display!</p>
}

@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Primary.Id, Type = EntityType.Workspace } ,Policies.WorkspaceContributorWithBoardLimitPolicy)).Succeeded)
{
    <a asp-controller="Boards" asp-action="Add" asp-route-workspaceId="@Model.Primary.Id" asp-route-returnUrl="@Model.ReturnUrl" class="btn btn-primary" >Add a board</a>
}

<br/>
<br/>
<h2>@Model.Primary.Title Members</h2>
@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Primary.Id, Type = EntityType.Workspace } ,Policies.WorkspaceAdminPolicy)).Succeeded)
{
    <div id="membersTable"></div>
}
else
{
    <p>You are not authorized to view the workspace members</p>
}

<br/>
<br/>
<h2>Member Workspaces</h2>
@if (Model.Others.Count > 0)
{
    int counter = 0;
    @foreach(var ws in Model.Others){
        counter++;
        <h3>@ws.Title</h3>
        <p>@ws.Description</p>
        <h3>Boards</h3>
        @if (ws.Boards.Count > 0)
        {
            foreach(var otherBoard in ws.Boards)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = @otherBoard.Id, Type = EntityType.Board } ,Policies.BoardReaderPolicy)).Succeeded)
                        {
                            <h5 class="card-title"><a asp-controller="Boards" asp-action="Get" asp-route-boardId="@otherBoard.Id">@otherBoard.Title</a></h5>    
                        }
                        else
                        {
                            <h5 class="card-title">@otherBoard.Title</h5>
                        }
                        
                        <p class="card-text">@otherBoard.Description</p>
                    </div>
                </div>
                <br/>
            }

            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = ws.Id, Type = EntityType.Workspace } ,Policies.WorkspaceContributorWithBoardLimitPolicy)).Succeeded)
            {
                <a asp-controller="Boards" asp-action="Add" asp-route-workspaceId="@ws.Id" class="btn btn-primary" >Add a board</a>
            }

            <br/>
            <br/>           
        }
        else
        {
            <p>No Boards to display!</p>
        }

         <h2>@ws.Title Members</h2>
            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = ws.Id, Type = EntityType.Workspace } ,Policies.WorkspaceAdminPolicy)).Succeeded)
            {
                var membersId = "membersTable" + counter;
                <div id="@membersId"></div>
            }
            else
            {
                <p>You are not authorized to view the workspace members 1</p>
            }

        <br/>
        <br/>
    }   
}
else
{
    <p>You are not part of any other workspaces!</p>
}


@section Css
{
	<link href="@Url.Content("~/lib/jquery-ui-1.13.1/jquery-ui.css")" rel="stylesheet" type="text/css" />
    <br />
    <br />
	<link href="@Url.Content("~/lib/jtable.2.4.0/themes/metro/blue/jtable.css")" rel="stylesheet" type="text/css" />
}

@section scripts
{
    <script src="~/lib/jquery-ui-1.13.1/jquery-ui.js"></script>
    <script src="~/lib/jtable.2.4.0/jquery.jtable.js"></script> 

    <script type="text/javascript">
        function listProspectiveUsers(workspaceId){
            console.log('here');
            return fetch('/Workspaces/ListProspectiveUsers?workspaceId=' + workspaceId,
            {
                method: "get"
            })
            .then(function (response) {
                return response.json();
            });
        }
        
        function onListProspectiveUsers(listProspectiveUsersResponseJson, workspaceId, memberTableId){
            if (listProspectiveUsersResponseJson.succeeded === true){
                var listProspectiveUsersResponse = listProspectiveUsersResponseJson.records;
                if (!notNullOrEmpty(listProspectiveUsersResponse)) {
                    console.log("Server error, a call to ListMembers failed.");
                    return;
                }
                
                var users = listProspectiveUsersResponseJson.records;

                    $('#' + memberTableId).jtable({
		                title: "Members",
                        sorting: false,
		                multiSorting: false,
		                columnSelectable: false,				
		                AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
		                actions: {
		                    listAction: '/Workspaces/GetWorkspaceMembers?workspaceId=' + workspaceId,
                            createAction: '/Workspaces/CreateWorkspaceMember',
                            updateAction: '/Workspaces/UpdateWorkspaceMember',
                            deleteAction: '/Workspaces/DeleteWorkspaceMember'
		                },
		                fields: {
                            WorkspaceId: {
                                type: 'hidden',
                                defaultValue: workspaceId
                            },
                            MemberId: {
                                type: 'hidden'
                            },
                            Id: {
                                key: true,
                                create: false,
                                edit: false,
                                list: false
                            },
		                    MemberName: {
			                    title: 'Name',
                                create: false,
                                 edit: false
		                    },
		                    MemberEmail: {
			                    title: 'Email',
                                input: function (data) {
                                    if (data.record) {
                                        return '<input type="text" name="MemberEmail" style="width:200px" value="' + data.record.MemberEmail + '" readonly />';
                                    } else {
                                        return '<input type="text" name="MemberEmail" style="width:200px" />';
                                    }
                                }
		                    },
                            RoleId:{
                                title: "Role",
                                options: '/Roles/ListRoles'
                            },
                            Status: {
                                title: "Status",
                                create: false,
                                edit: false
                            },
                            AddedByName: {
			                    title: 'Added By',
                                create: false,
                                edit: false
		                    },
                            AddedById: {
			                     type: 'hidden'
		                    },
		                    CreatedAt: {
			                    title: 'Added At',
                                create: false,
                                edit: false
		                    }
		                },
                        formCreated: function(event, data){
                             data.form.find('[name=MemberEmail]').autocomplete({
                                minLength: 0,
                                source: users,                        
                                focus: function( event, ui ) {
                                    $("#Edit-MemberEmail").val( ui.item.label);
                                    return false;
                                },
                                select: function( event, ui ) {
                                    $("#Edit-MemberEmail").val(ui.item.label);
                                    $("#Edit-MemberId").val(ui.item.value); 
                                    return false;
                                }                        
                             })
                             .autocomplete("instance")._renderItem = function( ul, item ){
                                       return $( "<li>" ).append( "<div>" + item.label+ "</div>" ).appendTo( ul );
                             };
                        }
	                }).jtable('load');
             } 
             else {                                    
                console.log(`Could not load members table due to the error '${listProspectiveUsersResponseJson.message}'`);
             }
                        
        }

        function notNullOrEmpty(obj) {
            return typeof obj !== 'undefined' && obj && (!$.isPlainObject(obj) || !$.isEmptyObject(obj));
        }
    </script>

@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Primary.Id, Type = EntityType.Workspace } ,Policies.WorkspaceAdminPolicy)).Succeeded)
{
    <script type="text/javascript">
        
        listProspectiveUsers(`@Model.Primary.Id`)
        .then(data => onListProspectiveUsers(data, `@Model.Primary.Id`, "membersTable"))
        .catch(function(error) {
            console.log(error);
        });      
    </script>
}

@{int counter = 0;
         foreach(var ws in Model.Others){
            counter++;
            var memberTableId = "membersTable" + @counter;
            if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = ws.Id, Type = EntityType.Workspace } ,Policies.WorkspaceAdminPolicy)).Succeeded)
            {                
                <script type="text/javascript">                            
                        listProspectiveUsers(`@ws.Id`)
                            .then(data => onListProspectiveUsers(data, `@ws.Id`, `@memberTableId`))
                            .catch(function(error) {
                                console.log(error);
                            });                          
                </script>
            }
         }
}
}