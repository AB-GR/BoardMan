@using BoardMan.Web.Auth
@using BoardMan.Web.Data
@using BoardMan.Web.Infrastructure.Extensions
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model Board
@{
    ViewData["Title"] = "View Board";
}

<h1>@ViewData["Title"]</h1>

<h3>@Model.Title</h3>
<p>@Model.Description</p>
<h3>Lists & Tasks</h3>

@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardReaderPolicy)).Succeeded)
{
    <div id="listsTable"></div>
}
else{
    <p>You are not authorized to view the board lists and tasks</p>
}


@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardAdminPolicy)).Succeeded)
{
    <div id="membersTable"></div>
}
else{
    <p>You are not authorized to view the board members</p>
}


<div class="modal fade" id="filePreviewModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
         <img name="previewImage" id="previewImage" style="height:80%;width:80%" src=""/>
      </div>
    </div>
  </div>
</div>
@section Css
{
	<link href="@Url.Content("~/lib/jquery-ui-1.13.1/jquery-ui.css")" rel="stylesheet" type="text/css" />
	<link href="@Url.Content("~/lib/jtable.2.4.0/themes/metro/blue/jtable.css")" rel="stylesheet" type="text/css" />
}

@section scripts
{
    <script src="~/lib/jquery-ui-1.13.1/jquery-ui.js"></script>
    <script src="~/lib/jtable.2.4.0/jquery.jtable.js"></script> 

 @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardReaderPolicy)).Succeeded)
 { 
    <script type="text/javascript">

        $(document).on("click", ".open-FilePreviewModal", function () {
             var imgSource = $(this).data('src');
             $(".modal-body #previewImage").attr("src", imgSource);             
        });

        // Read a page's GET URL variables and return them as an associative array.
        function getVars(url)
        {
            var formData = new FormData();
            var split;
            $.each(url.split("&"), function(key, value) {
                split = value.split("=");
                formData.append(split[0], decodeURIComponent(split[1].replace(/\+/g, " ")));
            });

            return formData;
        }

        // Variable to store your files
        var files;

        $( document ).delegate('#input-image','change', prepareUpload);

        // Grab the files and set them to our variable
        function prepareUpload(event)
        {
            files = event.target.files;            
        }

        $(function () {
        $('#listsTable').jtable({
                title: "Lists",
                sorting: false,
				multiSorting: false,
				columnSelectable: false,				
				AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				actions: {
					listAction: '/Lists/GetListsByBoardId?boardId=@Model.Id',
                    @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                    {
                        @: createAction: '/Lists/CreateList',
                        @: updateAction: '/Lists/UpdateList',
                        @: deleteAction: '/Lists/DeleteList'
                    }                    
				},
				fields: {
                    BoardId: {
                        type: 'hidden',
                        defaultValue: '@Model.Id'
                    },
                    Id: {
                        key: true,
                        create: false,
                        edit: false,
                        list: false
                    },
					Title: {
						title: 'Title'
					},
					Description: {
						title: 'Description'
					},
                    Tasks: {
                        tableId: 'tasksTable',
                        title: 'Tasks',
                        width: '5%',
                        sorting: false,
                        edit: false,
                        create: false,
                        display: function (listData) {
                            var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Tasks" />');
                            $img.click(function () {
                                $('#listsTable').jtable('openChildTable', $img.closest('tr'), {
                                    title: "Tasks",
                                    sorting: false,
				                    multiSorting: false,
				                    columnSelectable: false,				
				                    AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                    actions: {
					                    listAction: '/Tasks/GetTasksByListId?listId=' + listData.record.Id,
                                        @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                                        {
                                            @: createAction: '/Tasks/CreateTask',
                                            @: updateAction: '/Tasks/UpdateTask',
                                            @: deleteAction: '/Tasks/DeleteTask'
                                        }                                        
				                    },
                                    fields: {
                                        ListId: {
                                            title: 'List',
                                            list: false,
                                            create: false,                                           
                                            options: '/Boards/ListOtherLists?boardId=@Model.Id&listId=' + listData.record.Id
                                        },
                                        ListId: {
                                            title: 'List',
                                            list: false,
                                            update: false,
                                            type: 'hidden',
                                            defaultValue: listData.record.Id
                                        },
                                        Id: {
                                            key: true,
                                            create: false,
                                            edit: false,
                                            list: false
                                        },
					                    Title: {
						                    title: 'Title'
					                    },
					                    Description: {
						                    title: 'Description'
					                    },
                                        EndDate: {
                                            title: 'End Date',                                            
                                        },
                                        ActualEndDate: {
                                            title: 'Actual End Date'
                                        },
                                        IsCompleted: {
                                            title: 'Is Completed',
                                            display: function (data) {
                                                return `<input type="checkbox" id="isCompleted" name="isCompleted" ${data.record.IsCompleted === true ? 'checked' : ''}>`;
                                            }
                                        }
                                        @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardAdminPolicy)).Succeeded)
                                        {                                       
                                            @:,AssignedToId:{ title: 'Assigned To',  options: '/Boards/ListAssignees?boardId=@Model.Id' }                                           
                                        },
                                        Comments:
                                        {                                            
                                            title: 'Comments',
                                            width: '5%',
                                            sorting: false,
                                            edit: false,
                                            create: false,
                                            display: function (tasksData) {                                                
                                                var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Comments" />');
                                                $img.click(function () {
                                                    $img.closest('.jtable-child-table-container').jtable('openChildTable', $img.closest('tr'), {
                                                        title: "Comments",
                                                        sorting: false,
				                                        multiSorting: false,
				                                        columnSelectable: false,				
				                                        AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                                        actions: {
					                                        listAction: '/Tasks/GetTaskComments?taskId=' + tasksData.record.Id,
                                                            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardReaderPolicy)).Succeeded)
                                                            {
                                                                @: createAction: '/Tasks/CreateTaskComment',
                                                                @: updateAction: '/Tasks/UpdateTaskComment',
                                                                @: deleteAction: '/Tasks/DeleteTaskComment'
                                                            }  
				                                        },
                                                        fields: {
                                                            TaskId: {
                                                                type: 'hidden',
                                                                defaultValue: tasksData.record.Id
                                                            },
                                                            Id: {
                                                                key: true,
                                                                create: false,
                                                                edit: false,
                                                                list: false
                                                            },
					                                        Comment: {
						                                        title: 'Comment'
					                                        },
                                                            CommentedByName:{
                                                                title: "Commented By",
                                                                create: false,
                                                                edit: false
                                                            },
                                                            CommentedById: {
                                                                type: 'hidden'
                                                            }
                                                        }
                                                    }, function (data) { //opened handler
                                                        data.childTable.jtable('load');
                                                    });
                                                });
                            
                                                return $img;
                                            }
                                        },
                                        Labels:
                                        {                                            
                                            title: 'Labels',
                                            width: '5%',
                                            sorting: false,
                                            edit: false,
                                            create: false,
                                            display: function (labelData) {                                                
                                                var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Labels" />');
                                                $img.click(function () {
                                                    $img.closest('.jtable-child-table-container').jtable('openChildTable', $img.closest('tr'), {
                                                        title: "Labels",
                                                        sorting: false,
				                                        multiSorting: false,
				                                        columnSelectable: false,				
				                                        AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                                        actions: {
					                                        listAction: '/Tasks/GetTaskLabels?taskId=' + labelData.record.Id,
                                                            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                                                            {
                                                                @: createAction: '/Tasks/CreateTaskLabel',
                                                                @: updateAction: '/Tasks/UpdateTaskLabel',
                                                                @: deleteAction: '/Tasks/DeleteTaskLabel'
                                                            }
				                                        },
                                                        fields: {
                                                            TaskId: {
                                                                type: 'hidden',
                                                                defaultValue: labelData.record.Id
                                                            },
                                                            Id: {
                                                                key: true,
                                                                create: false,
                                                                edit: false,
                                                                list: false
                                                            },
					                                        Label: {
						                                        title: 'Label'
					                                        }
                                                        }
                                                    }, function (data) { //opened handler
                                                        data.childTable.jtable('load');
                                                    });
                                                });
                            
                                                return $img;
                                            }
                                        },
                                        Checklists:
                                        {                                            
                                            title: 'Checklists',
                                            width: '5%',
                                            sorting: false,
                                            edit: false,
                                            create: false,
                                            display: function (checklistData) {                                                
                                                var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Checklists" />');
                                                $img.click(function () {
                                                    $img.closest('.jtable-child-table-container').jtable('openChildTable', $img.closest('tr'), {
                                                        title: "Checklists",
                                                        sorting: false,
				                                        multiSorting: false,
				                                        columnSelectable: false,				
				                                        AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                                        actions: {
					                                        listAction: '/Tasks/GetTaskChecklists?taskId=' + checklistData.record.Id,
                                                            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                                                            {
                                                                @: createAction: '/Tasks/CreateTaskChecklist',
                                                                @: updateAction: '/Tasks/UpdateTaskChecklist',
                                                                @: deleteAction: '/Tasks/DeleteTaskChecklist'
                                                            }                                                            
				                                        },
                                                        fields: {
                                                            TaskId: {
                                                                type: 'hidden',
                                                                defaultValue: checklistData.record.Id
                                                            },
                                                            Id: {
                                                                key: true,
                                                                create: false,
                                                                edit: false,
                                                                list: false
                                                            },
					                                        Description: {
						                                        title: 'Description'
					                                        },
					                                        IsComplete: {
						                                        title: 'Done',
                                                                display: function (data) {
                                                                    return `<input type="checkbox" id="isComplete" name="isComplete" ${data.record.IsComplete === true ? 'checked' : ''}>`;
                                                                }
					                                        },
					                                        Priority: {
						                                        title: 'Priority'
					                                        },
                                                            CreatedById: {
                                                                type: 'hidden'
                                                            }
                                                        }
                                                    }, function (data) { //opened handler
                                                        data.childTable.jtable('load');
                                                    });
                                                });
                            
                                                return $img;
                                            }
                                        },
                                        Watchers:
                                        {                                            
                                            title: 'Watchers',
                                            width: '5%',
                                            sorting: false,
                                            edit: false,
                                            create: false,
                                            display: function (taskWatcherData) {                                                
                                                var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Watchers" />');
                                                $img.click(function () {
                                                    $img.closest('.jtable-child-table-container').jtable('openChildTable', $img.closest('tr'), {
                                                        title: "Watchers",
                                                        sorting: false,
				                                        multiSorting: false,
				                                        columnSelectable: false,				
				                                        AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                                        actions: {
					                                        listAction: '/Tasks/GetTaskWatchers?taskId=' + taskWatcherData.record.Id,
                                                            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                                                            {
                                                                @: createAction: '/Tasks/CreateTaskWatcher',
                                                                @: deleteAction: '/Tasks/DeleteTaskWatcher'                                                                
                                                            }
				                                        },
                                                        fields: {
                                                            TaskId: {
                                                                type: 'hidden',
                                                                defaultValue: taskWatcherData.record.Id
                                                            },
                                                            Id: {
                                                                key: true,
                                                                create: false,                                                                
                                                                list: false
                                                            },
                                                            WatchedById:{
                                                                title: "Watched By",
                                                                options: '/Boards/ListWatchers?boardId=@Model.Id'
                                                            }
                                                        }
                                                    }, function (data) { //opened handler
                                                        data.childTable.jtable('load');
                                                    });
                                                });
                            
                                                return $img;
                                            }
                                        },                                        
                                        Attachments:
                                        {                                            
                                            title: 'Attachments',
                                            width: '5%',
                                            sorting: false,
                                            edit: false,
                                            create: false,
                                            display: function (taskAttachmentData) {                                                
                                                var $img = $('<img src="/lib/jtable.2.4.0/themes/basic/close.png" title="Manage Attachments" />');
                                                $img.click(function () {
                                                    $img.closest('.jtable-child-table-container').jtable('openChildTable', $img.closest('tr'), {
                                                        title: "Attachments",
                                                        sorting: false,
				                                        multiSorting: false,
				                                        columnSelectable: false,				
				                                        AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
				                                        actions: {
					                                        listAction: '/Tasks/GetTaskAttachments?taskId=' + taskAttachmentData.record.Id,
                                                            @if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardContributorPolicy)).Succeeded)
                                                            {
                                                                <text>
                                                                    createAction: function (postData) {
                                                                        var formData = getVars(postData);

                                                                        if($('#input-image').val() !== "")
                                                                        {
                                                                            formData.append("File", $('#input-image').get(0).files[0]);
                                                                        }
                                                                
                                                                        return $.Deferred(function ($dfd) {                                                                    
                                                                            $.ajax({
                                                                                url: '/Tasks/CreateTaskAttachment',
                                                                                type: 'POST',
                                                                                dataType: 'json',
                                                                                data: formData,
                                                                                processData: false, // Don't process the files
                                                                                contentType: false, // Set content type to false as jQuery will tell the server its a query string request
                                                                                success: function (data) {
                                                                                    $dfd.resolve(data);
                                                                                    $img.closest('.jtable-child-table-container').jtable('load');
                                                                                },
                                                                                error: function () {
                                                                                    $dfd.reject();                                                                           
                                                                                }
                                                                            });
                                                                        });
                                                                    },    
                                                                </text>
                                                                @: deleteAction: '/Tasks/DeleteTaskAttachment'                                                                
                                                            }
				                                        },
                                                        fields: {
                                                            TaskId: {
                                                                type: 'hidden',
                                                                defaultValue: taskAttachmentData.record.Id
                                                            },
                                                            Id: {
                                                                key: true,
                                                                create: false,                                                                
                                                                list: false
                                                            },
                                                            TrustedFileName: {
                                                                title: "File Name",
                                                                 create: false
                                                            },
                                                            Note: {
                                                                title: "Note"
                                                            },
                                                            UploadedByName: {
                                                                title: "Uploaded By",                        
                                                                list: true,
                                                                create: false
                                                            },
                                                            CreatedAt: {
                                                                title: "Uploaded Date",                        
                                                                list: true,
                                                                create: false
                                                            },
                                                            Image: {
                                                                title: 'Select File',
                                                                list: false,
                                                                create: true,
                                                                input: function(data) {
                                                                    html = '<input type ="file" id="input-image" name="File" accept="image/*, .txt" />';
                                                                    return html;
                                                                }
                                                            },
                                                            Download: {
                                                                title: 'Download',
                                                                create: false,
                                                                display: function(data){
                                                                    var $img = `<a target="_blank" href="/Tasks/DownloadTaskAttachment?id=${data.record.Id}">Download</a>`;
                                                                    return $img;
                                                                }
                                                            },
                                                            Preview: {
                                                                title: 'Preview',
                                                                create: false,
                                                                display: function(data){
                                                                    var $img = `<a data-bs-toggle="modal" data-bs-target="#filePreviewModal" data-src="${data.record.FileUri}" class="open-FilePreviewModal">Preview</a>`;
                                                                    return $img;
                                                                }
                                                            }
                                                        }
                                                    }, function (data) { //opened handler
                                                        data.childTable.jtable('load');
                                                    });
                                                });
                            
                                                return $img;
                                            }
                                        }
                                    }
                                }, function (data) { //opened handler
                                    data.childTable.jtable('load');
                                });
                            });
                            
                            return $img;
                        }
                    }
				}				
            }).jtable('load');            
        });

        function notNullOrEmpty(obj) {
            return typeof obj !== 'undefined' && obj && (!$.isPlainObject(obj) || !$.isEmptyObject(obj));
        }
    </script>
}

@if ((await AuthorizationService.AuthorizeAsync(User, new EntityResource { Id = Model.Id, Type = EntityType.Board } ,Policies.BoardAdminPolicy)).Succeeded)
{
    <script type="text/javascript">
        listProspectiveUsers()
        .then(onListProspectiveUsers)
        .catch(function(error) {
            console.log(error);
        });

        function listProspectiveUsers() {
            return fetch('/Boards/ListProspectiveUsers?boardId=@Model.Id', {
                    method: "get"
                })
                .then(function(response) {
                    return response.json();
                });
        }

        function onListProspectiveUsers(listProspectiveUsersResponseJson) {
            if (listProspectiveUsersResponseJson.succeeded === true) {
                var listProspectiveUsersResponse = listProspectiveUsersResponseJson.records;
                if (!notNullOrEmpty(listProspectiveUsersResponse)) {
                    console.log("Server error, a call to ListMembers failed.");
                    return;
                }

                var users = listProspectiveUsersResponseJson.records;

                $('#membersTable').jtable({
                    title: "Members",
                    sorting: false,
                    multiSorting: false,
                    columnSelectable: false,
                    AntiForgeryToken: '@Html.AntiForgeryTokenValue()',
                    actions: {
                        listAction: '/Boards/GetBoardMembers?boardId=@Model.Id',
                        createAction: '/Boards/CreateBoardMember',
                        updateAction: '/Boards/UpdateBoardMember',
                        deleteAction: '/Boards/DeleteBoardMember'
                    },
                    fields: {
                        BoardId: {
                            type: 'hidden',
                            defaultValue: '@Model.Id'
                        },
                        MemberId: {
                            type: 'hidden'
                        },
                        Id: {
                            key: true,
                            create: false,
                            edit: false,
                            list: false
                        },
                        MemberName: {
                            title: 'Name',
                            create: false,
                            edit: false
                        },
                        MemberEmail: {
                            title: 'Email',
                            input: function(data) {
                                if (data.record) {
                                    return '<input type="text" name="MemberEmail" style="width:200px" value="' + data.record.MemberEmail + '" readonly />';
                                } else {
                                    return '<input type="text" name="MemberEmail" style="width:200px" />';
                                }
                            }
                        },
                        RoleId: {
                            title: "Role",
                            options: '/Roles/ListRoles?roleType=@($"{RoleType.BoardRole}")'
                        },
                        Status: {
                            title: "Status",
                            create: false,
                            edit: false
                        },
                        AddedByName: {
                            title: 'Added By',
                            create: false,
                            edit: false
                        },
                        AddedById: {
                            type: 'hidden'
                        },
                        CreatedAt: {
                            title: 'Added At',
                            create: false,
                            edit: false
                        }
                    },
                    formCreated: function(event, data) {
                        data.form.find('[name=MemberEmail]').autocomplete({
                                minLength: 0,
                                source: users,
                                focus: function(event, ui) {
                                    $("#Edit-MemberEmail").val(ui.item.label);
                                    return false;
                                },
                                select: function(event, ui) {
                                    $("#Edit-MemberEmail").val(ui.item.label);
                                    $("#Edit-MemberId").val(ui.item.value);
                                    return false;
                                }
                            })
                            .autocomplete("instance")._renderItem = function(ul, item) {
                                return $("<li>").append("<div>" + item.label + "</div>").appendTo(ul);
                            };
                    }
                }).jtable('load');
            } else {
                console.log(`Could not load members table due to the error '${listProspectiveUsersResponseJson.message}'`);
            }
        }    
    </script>
}

}